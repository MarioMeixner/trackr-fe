/* tslint:disable */
/* eslint-disable */
/**
 * Trackr
 * The Trackr API description
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTrackDto,
  TrackEntity,
  UpdateTrackDto,
} from '../models/index';
import {
    CreateTrackDtoFromJSON,
    CreateTrackDtoToJSON,
    TrackEntityFromJSON,
    TrackEntityToJSON,
    UpdateTrackDtoFromJSON,
    UpdateTrackDtoToJSON,
} from '../models/index';

export interface TracksControllerCreateRequest {
    createTrackDto: CreateTrackDto;
}

export interface TracksControllerFindOneRequest {
    id: string;
}

export interface TracksControllerRemoveRequest {
    id: string;
}

export interface TracksControllerUpdateRequest {
    id: string;
    updateTrackDto: UpdateTrackDto;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /**
     */
    async tracksControllerCreateRaw(requestParameters: TracksControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackEntity>> {
        if (requestParameters['createTrackDto'] == null) {
            throw new runtime.RequiredError(
                'createTrackDto',
                'Required parameter "createTrackDto" was null or undefined when calling tracksControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTrackDtoToJSON(requestParameters['createTrackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackEntityFromJSON(jsonValue));
    }

    /**
     */
    async tracksControllerCreate(requestParameters: TracksControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackEntity> {
        const response = await this.tracksControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tracksControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TrackEntity>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TrackEntityFromJSON));
    }

    /**
     */
    async tracksControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TrackEntity>> {
        const response = await this.tracksControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async tracksControllerFindOneRaw(requestParameters: TracksControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tracksControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackEntityFromJSON(jsonValue));
    }

    /**
     */
    async tracksControllerFindOne(requestParameters: TracksControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackEntity> {
        const response = await this.tracksControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tracksControllerRemoveRaw(requestParameters: TracksControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tracksControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackEntityFromJSON(jsonValue));
    }

    /**
     */
    async tracksControllerRemove(requestParameters: TracksControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackEntity> {
        const response = await this.tracksControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async tracksControllerUpdateRaw(requestParameters: TracksControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackEntity>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling tracksControllerUpdate().'
            );
        }

        if (requestParameters['updateTrackDto'] == null) {
            throw new runtime.RequiredError(
                'updateTrackDto',
                'Required parameter "updateTrackDto" was null or undefined when calling tracksControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tracks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTrackDtoToJSON(requestParameters['updateTrackDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackEntityFromJSON(jsonValue));
    }

    /**
     */
    async tracksControllerUpdate(requestParameters: TracksControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackEntity> {
        const response = await this.tracksControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
